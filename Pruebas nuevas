
-- 1Ô∏è‚É£ EXISTS: Mostrar usuarios que han hecho al menos una publicaci√≥n
SELECT u.nombre, u.email
FROM Usuarios u
WHERE EXISTS (
    SELECT 1 
    FROM Publicaciones p 
    WHERE p.id_usuario = u.id_usuario
);

-- 2Ô∏è‚É£ NOT EXISTS: Usuarios que NO han publicado nada
SELECT u.nombre, u.email
FROM Usuarios u
WHERE NOT EXISTS (
    SELECT 1
    FROM Publicaciones p
    WHERE p.id_usuario = u.id_usuario
);

-- 3Ô∏è‚É£ UNION: combinar t√≠tulos de publicaciones y comentarios (sin duplicados)
SELECT titulo AS texto, 'Publicaci√≥n' AS tipo
FROM Publicaciones
UNION
SELECT comentario, 'Comentario'
FROM Comentarios;

-- 4Ô∏è‚É£ UNION ALL: igual que UNION pero muestra duplicados
SELECT titulo AS texto, 'Publicaci√≥n' AS tipo
FROM Publicaciones
UNION ALL
SELECT comentario, 'Comentario'
FROM Comentarios;

-- 5Ô∏è‚É£ INSERT: a√±adir nuevo usuario
INSERT INTO Usuarios (nombre, email, contrase√±a, id_rol)
VALUES ('Nuevo Usuario', 'nuevo.user@example.com', 'clave1234', 3);

-- 6Ô∏è‚É£ UPDATE: cambiar el rol de un usuario
UPDATE Usuarios
SET id_rol = 1
WHERE nombre = 'Mar√≠a L√≥pez';

-- 7Ô∏è‚É£ DELETE: eliminar una reacci√≥n espec√≠fica
DELETE FROM Reacciones
WHERE tipo = 'Dislike' AND id_usuario = 1;

-- 8Ô∏è‚É£ PIVOT: cantidad de reacciones por tipo (resumen tipo tabla din√°mica)
SELECT *
FROM (
    SELECT tipo, id_publicacion
    FROM Reacciones
) AS Fuente
PIVOT (
    COUNT(id_publicacion)
    FOR tipo IN ([Like], [Love], [Wow])
) AS PivotTable;

-- 9Ô∏è‚É£ RIGHT JOIN: mostrar todas las publicaciones, incluso si no tienen comentarios
SELECT p.titulo, c.comentario, u.nombre AS autor_comentario
FROM Comentarios c
RIGHT JOIN Publicaciones p ON c.id_publicacion = p.id_publicacion
LEFT JOIN Usuarios u ON c.id_usuario = u.id_usuario
ORDER BY p.titulo;

-- üîü CROSS JOIN: combina todos los usuarios con todos los roles
SELECT u.nombre AS Usuario, r.nombre_rol AS RolPosible
FROM Usuarios u
CROSS JOIN Roles r;

-- 1Ô∏è‚É£1Ô∏è‚É£ TRANSACCIONES (COMMIT / ROLLBACK)
BEGIN TRANSACTION;

-- Insertar un nuevo post y comentario (ejemplo de transacci√≥n)
INSERT INTO Publicaciones (titulo, contenido, id_usuario)
VALUES ('Transacciones en SQL', 'Ejemplo pr√°ctico con COMMIT y ROLLBACK.', 2);

INSERT INTO Comentarios (comentario, id_usuario, id_publicacion)
VALUES ('Excelente ejemplo!', 3, SCOPE_IDENTITY());

-- Si todo sale bien, confirmamos los cambios
COMMIT TRANSACTION;

-- Si algo falla, podr√≠amos hacer:
-- ROLLBACK TRANSACTION;
